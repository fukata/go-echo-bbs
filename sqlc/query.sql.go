// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const createThreadMessage = `-- name: CreateThreadMessage :one
insert into thread_messages (message, created_at) values ($1, $2) RETURNING id, message, created_at
`

type CreateThreadMessageParams struct {
	Message   string
	CreatedAt time.Time
}

func (q *Queries) CreateThreadMessage(ctx context.Context, arg CreateThreadMessageParams) (ThreadMessage, error) {
	row := q.db.QueryRowContext(ctx, createThreadMessage, arg.Message, arg.CreatedAt)
	var i ThreadMessage
	err := row.Scan(&i.ID, &i.Message, &i.CreatedAt)
	return i, err
}

const getThreadMessages = `-- name: GetThreadMessages :many
select id, message, created_at from thread_messages order by id desc limit $1
`

func (q *Queries) GetThreadMessages(ctx context.Context, limit int32) ([]ThreadMessage, error) {
	rows, err := q.db.QueryContext(ctx, getThreadMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ThreadMessage
	for rows.Next() {
		var i ThreadMessage
		if err := rows.Scan(&i.ID, &i.Message, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
